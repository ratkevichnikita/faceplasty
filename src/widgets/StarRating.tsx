import React from "react";

interface StarRatingProps {
  rating: number;
  totalStars?: number;
}

const StarRating: React.FC<StarRatingProps> = ({ rating, totalStars = 5 }) => {
  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 !== 0;
  const emptyStars = totalStars - fullStars - (hasHalfStar ? 1 : 0);

  return (
    <div className="flex items-center gap-[0.3vw]">
      {/* Полные звезды */}
      {Array(fullStars)
        .fill(0)
        .map((_, index) => (
          <Star key={`full-${index}`} filled />
        ))}

      {/* Половинка звезды */}
      {hasHalfStar && <Star half />}

      {/* Пустые звезды */}
      {Array(emptyStars)
        .fill(0)
        .map((_, index) => (
          <Star key={`empty-${index}`} />
        ))}
    </div>
  );
};

interface StarProps {
  filled?: boolean;
  half?: boolean;
}

const Star: React.FC<StarProps> = ({ filled, half }) => {
  return (
    <svg
      width="18"
      height="18"
      viewBox="0 0 18 18"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M8.53815 0.609846C8.57613 0.51875 8.64022 0.440931 8.72234 0.386193C8.80447 0.331455 8.90095 0.302246 8.99965 0.302246C9.09835 0.302246 9.19483 0.331455 9.27696 0.386193C9.35908 0.440931 9.42317 0.51875 9.46115 0.609846L11.5272 5.57685C11.5625 5.66173 11.6207 5.7352 11.6951 5.78919C11.7696 5.84318 11.8575 5.87558 11.9492 5.88285L17.3122 6.31285C17.4105 6.32082 17.5044 6.35774 17.5818 6.41896C17.6593 6.48018 17.7169 6.56295 17.7473 6.65684C17.7778 6.75073 17.7798 6.85155 17.7531 6.94658C17.7264 7.04161 17.6721 7.1266 17.5972 7.19085L13.5111 10.6908C13.4413 10.7507 13.3893 10.8287 13.3609 10.9162C13.3325 11.0037 13.3288 11.0974 13.3502 11.1868L14.5981 16.4198C14.6211 16.5159 14.6152 16.6167 14.5809 16.7094C14.5467 16.8021 14.4858 16.8825 14.4059 16.9406C14.3259 16.9987 14.2306 17.0319 14.1319 17.0358C14.0331 17.0398 13.9355 17.0144 13.8511 16.9628L9.26015 14.1588C9.1817 14.111 9.09156 14.0856 8.99965 14.0856C8.90774 14.0856 8.8176 14.111 8.73915 14.1588L4.14815 16.9628C4.06384 17.0144 3.96616 17.0398 3.86743 17.0358C3.7687 17.0319 3.67335 16.9987 3.59343 16.9406C3.51351 16.8825 3.45259 16.8021 3.41837 16.7094C3.38415 16.6167 3.37816 16.5159 3.40115 16.4198L4.64915 11.1868C4.67055 11.0974 4.66684 11.0037 4.63843 10.9162C4.61003 10.8287 4.55802 10.7507 4.48815 10.6908L0.40215 7.19085C0.327197 7.1266 0.272939 7.04161 0.246212 6.94658C0.219486 6.85155 0.221488 6.75073 0.251966 6.65684C0.282445 6.56295 0.340035 6.48018 0.417479 6.41896C0.494923 6.35774 0.588756 6.32082 0.68715 6.31285L6.05015 5.88285C6.14183 5.87558 6.22973 5.84318 6.30418 5.78919C6.37863 5.7352 6.43675 5.66173 6.47215 5.57685L8.53815 0.609846Z"
        fill={filled ? "#FCC53A" : half ? "url(#halfFill)" : "#E5E5E5"}
      />
      {half && (
        <defs>
          <linearGradient id="halfFill" x1="0" x2="1" y1="0" y2="0">
            <stop offset="50%" stopColor="#FCC53A" />
            <stop offset="50%" stopColor="#E5E5E5" />
          </linearGradient>
        </defs>
      )}
    </svg>
  );
};

export default StarRating;
